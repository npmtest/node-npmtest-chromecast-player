{"/home/travis/build/npmtest/node-npmtest-chromecast-player/test.js":"/* istanbul instrument in package npmtest_chromecast_player */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-chromecast-player/lib.npmtest_chromecast_player.js":"/* istanbul instrument in package npmtest_chromecast_player */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_chromecast_player = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_chromecast_player = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-chromecast-player/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-chromecast-player && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_chromecast_player */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_chromecast_player\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_chromecast_player.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_chromecast_player.rollup.js'] =\n            local.assetsDict['/assets.npmtest_chromecast_player.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_chromecast_player.__dirname + '/lib.npmtest_chromecast_player.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-chromecast-player/node_modules/chromecast-player/index.js":"var Client = require('castv2-client').Client;\nvar scanner = require('chromecast-scanner');\nvar ware = require('ware');\nvar mutate = require('mutate.js');\nvar inherits = require('util').inherits;\nvar ee = require('events').EventEmitter;\nvar extend = require('xtend');\nvar debug = require('debug')('chromecast-player');\nvar Promise = require('promiscuous');\nvar api = require('./api');\nvar noop = function() {};\nvar slice = Array.prototype.slice;\n\nvar defaults = {\n  autoplay: true,\n  ttl: 10000,\n  startTime: 0,\n  streamType: 'BUFFERED',\n  activeTrackIds: [],\n  media: {},\n  cb: noop\n};\n\nvar apirize = function(fn, ctx) {\n  return mutate(function(opts) {\n    opts = opts || {};\n    if (opts._opts) {\n        opts = extend(opts, opts._opts);\n        delete opts._opts;\n      }\n      fn.call(ctx, opts);\n    })\n    .method(['function'], ['cb'])\n    .method(['object', 'function'], ['_opts', 'cb'])\n    .method(['string'], ['path'])\n    .method(['string', 'function'], ['path', 'cb'])\n    .method(['string', 'object'], ['path', '_opts'])\n    .method(['string', 'object', 'function'], ['path', '_opts', 'cb'])\n    .method(['string', 'string'], ['path', 'type'])\n    .method(['string', 'string', 'function'], ['path', 'type', 'cb'])\n    .method(['string', 'string', 'object'], ['path', 'type', '_opts'])\n    .method(['string', 'string', 'object', 'function'], ['path', 'type', '_opts', 'cb'])\n    .close();\n};\n\nvar shutdown = function() {\n  debug('shutdown');\n  if (this.client && !this.clientClosed) {\n    this.client.close();\n    this.clientClosed = true;\n  }\n  if (this.player && !this.playerClosed) {\n    this.player.close();\n    this.playerClosed = true;\n  }\n  this.inst._setStatus(this, 'closed');\n  this.emit('closed');\n};\n\nvar player = function() {\n  if (!(this instanceof player)) return new player();\n  ee.call(this);\n  this.mw = ware();\n  this.use = this.mw.use.bind(this.mw);\n\n  this.launch = apirize(function(opts) {\n    var that = this;\n    var ctx = new ee();\n    ctx.mode = 'launch';\n    ctx.options = opts;\n    ctx.api = api;\n    ctx.shutdown = shutdown;\n    ctx.inst = this;\n    this.mw.run(ctx, function(err, ctx) {\n      ctx.options = extend(defaults, ctx.options);\n      if (err) return ctx.options.cb(err);\n      that._setStatus(ctx, 'loading plugins');\n      that._scan(ctx)\n        .then(function(ctx) { return that._connect(ctx); })\n        .then(function(ctx) { return that._launch(ctx); })\n        .then(function(ctx) { return that._load(ctx); })\n        .then(function(ctx) { return that._status(ctx); })\n        .then(function(ctx) { ctx.options.cb(null, ctx.player, ctx); },\n              function(err) { ctx.options.cb(err); });\n    });\n  }, this);\n\n  this.attach = apirize(function(opts) {\n    var that = this;\n    var ctx = new ee();\n    ctx.mode = 'attach';\n    ctx.options = opts;\n    ctx.api = api;\n    ctx.shutdown = shutdown;\n    ctx.inst = this;\n    that._setStatus(ctx, 'loading plugins');\n    this.mw.run(ctx, function(err, opts) {\n      ctx.options = extend(defaults, ctx.options);\n      if (err) return options.cb(err);\n      that._scan(ctx)\n        .then(function(ctx) { return that._connect(ctx); })\n        .then(function(ctx) { return that._find(ctx); })\n        .then(function(ctx) { return that._join(ctx); })\n        .then(function(ctx) { return that._status(ctx); })\n        .then(function(ctx) { ctx.options.cb(null, ctx.player, ctx); },\n              function(err) { ctx.options.cb(err); });\n    });\n  }, this);\n};\n\ninherits(player, ee);\n\n// find chromecast devices in the network and\n// either return the first found or the one\n// which matches device.\nplayer.prototype._scan = function(ctx) {\n  this._setStatus(ctx, 'scanning');\n  return new Promise(function(resolve, reject) {\n    if (ctx.options.address) {\n      ctx.address = ctx.options.address;\n      return resolve(ctx);\n    }\n    scanner({\n        name: ctx.options.device ? ctx.options.device + '.local' : null,\n        ttl: ctx.options.ttl,\n      },\n      function(err, service) {\n        if (err) return reject(err);\n        ctx.address = service.data;\n        resolve(ctx);\n      }\n    );\n  });\n};\n\n// establish a connection to a chromecast device\nplayer.prototype._connect = function(ctx) {\n  this._setStatus(ctx, 'connecting');\n  return new Promise(function(resolve, reject) {\n    var client = new Client();\n    client.connect(ctx.address, function() {\n      ctx.client = client;\n      resolve(ctx);\n    });\n    var onError = function(err) {\n      debug('client error %o', err);\n      client.removeListener('error', onError);\n      ctx.shutdown();\n    };\n    var onClose = function() {\n      debug('client onClose');\n      client.client.removeListener('close', onClose);\n      client.removeListener('error', onError);\n      ctx.clientClosed = true;\n    };\n    client.client.on('close', onClose);\n    client.on('error', onError);\n  });\n};\n\n// find running app\nplayer.prototype._find = function(ctx) {\n  this._setStatus(ctx, 'finding');\n  return new Promise(function(resolve, reject) {\n    ctx.client.getSessions(function(err, apps) {\n      if (err) return reject(err);\n      if (!apps.length) return reject(new Error('app not found'));\n      ctx.session = apps[0];\n      resolve(ctx);\n    });\n  });\n};\n\n// join an existing chromecast session\nplayer.prototype._join = function(ctx) {\n  var that = this;\n  this._setStatus(ctx, 'joining');\n  return new Promise(function(resolve, reject) {\n    ctx.client.join(ctx.session, ctx.api,\n      function(err, p) {\n        if (err) return reject(err);\n        if (p.setPlatform) p.setPlatform(ctx.client);\n        that._setStatus(ctx, 'ready');\n        ctx.player = p;\n        var onStatus = function(status) {\n          that._setStatus(ctx, status.playerState.toLowerCase());\n        };\n        var onClosed = function() {\n          debug('_join player onClosed');\n          ctx.player.removeListener('status', onStatus);\n          ctx.player.removeListener('closed', onClosed);\n          ctx.playerClosed = true;\n          ctx.shutdown();\n        };\n        ctx.player.on('status', onStatus);\n        ctx.player.on('closed', onClosed);\n        resolve(ctx);\n      }\n    );\n  });\n};\n\n// fetch the current state of the player\nplayer.prototype._status = function(ctx) {\n  var that = this;\n  return new Promise(function(resolve, reject) {\n    ctx.player.updateStatus(function(err) {\n      if (err) return reject(err);\n      resolve(ctx);\n    });\n  });\n};\n\n// launch an application\nplayer.prototype._launch = function(ctx) {\n  var that = this;\n  this._setStatus(ctx, 'launching');\n  return new Promise(function(resolve, reject) {\n    ctx.client.launch(ctx.api, function(err, p) {\n      if (err) return reject(err);\n      if (p.setPlatform) p.setPlatform(ctx.client);\n      ctx.player = p;\n      resolve(ctx);\n    });\n  });\n};\n\n// load a media file\nplayer.prototype._load = function(ctx) {\n  var that = this;\n  this._setStatus(ctx, 'loading');\n  return new Promise(function(resolve, reject) {\n    ctx.player.load(ctx.options, function(err) {\n      if (err) return reject(err);\n      that._setStatus(ctx, 'ready');\n      var onStatus = function(status) {\n        that._setStatus(ctx, status.playerState.toLowerCase());\n      };\n      var onClosed = function() {\n        debug('_load player onClosed');\n        ctx.player.removeListener('status', onStatus);\n        ctx.player.removeListener('closed', onClosed);\n        ctx.playerClosed = true;\n        ctx.shutdown();\n      };\n      ctx.player.on('status', onStatus);\n      ctx.player.on('closed', onClosed);\n      resolve(ctx);\n    });\n  });\n};\n\nplayer.prototype._setStatus = function(ctx, status) {\n  ctx.status = status;\n  ctx.emit('status', status);\n};\n\nplayer.api = api;\n\nmodule.exports = player;\n","/home/travis/build/npmtest/node-npmtest-chromecast-player/node_modules/chromecast-player/api.js":"var castv2Cli = require('castv2-client');\nvar inherits = require('util').inherits;\nvar Application = castv2Cli.Application;\nvar RequestResponseController = castv2Cli.RequestResponseController;\nvar extend = require('xtend');\nvar debug = require('debug')('chromecast-player:api');\nvar timelineHelper = require('./timelineHelper');\nvar noop = function() {};\nvar slice = Array.prototype.slice;\n\nvar Api = function(client, session) {\n  var that = this;\n  Application.apply(this, arguments);\n  this.reqres = this.createController(RequestResponseController,\n    'urn:x-cast:com.google.cast.media');\n\n  var onMessage = function(response, broadcast) {\n    if (response.type !== 'MEDIA_STATUS' ||\n        !broadcast ||\n        !response.status ||\n        !response.status.length ||\n        !response.status[0]) {\n      return;\n    }\n\n    var status = response.status[0];\n    that.currentSession = status;\n    that.emit(status.playerState.toLowerCase(), status);\n    that.emit('status', status);\n  };\n\n  var onClose = function() {\n    debug('API close');\n    that.reqres.removeListener('message', onMessage);\n    that.reqres.removeListener('close', onClose);\n    that.removeListener('close', onClose);\n    if (that.client) {\n      that.client.removeListener('close', onClose);\n    }\n    that.tlHelper.removeListener('position', onPosition);\n    that.emit('closed');\n  };\n\n  this.reqres.on('message', onMessage);\n  this.reqres.on('close', onClose);\n  this.client.on('close', onClose);\n  this.on('close', onClose);\n\n  this.tlHelper = timelineHelper(this);\n\n  var onPosition = function(pos) {\n    that.emit('position', pos);\n  };\n\n  this.tlHelper.on('position', onPosition);\n};\n\nApi.APP_ID = 'CC1AD845';\n\ninherits(Api, Application);\n\nApi.prototype.getStatus = function(cb) {\n  var that = this;\n  this.reqres.request({ type: 'GET_STATUS' },\n    function(err, response) {\n      if(err) return callback(err);\n      var status = response.status[0];\n      that.currentSession = status;\n      cb(null, status);\n    }\n  );\n};\n\nApi.prototype.updateStatus = function(cb) {\n  var that = this;\n  cb = cb || noop;\n  this.getStatus(function(err, status) {\n    if (status) {\n      that.emit(status.playerState.toLowerCase(), status);\n      that.emit('status', status);\n    }\n    cb(err, status);\n  });\n};\n\nApi.prototype.load = function(opts, cb) {\n  var options = {\n    type: 'LOAD',\n    autoplay: opts.autoplay,\n    currentTime: opts.startTime,\n    activeTrackIds: opts.activeTrackIds\n  };\n  var media = extend({\n    contentId: opts.path,\n    contentType: opts.type,\n    streamType: opts.streamType\n  }, opts.media);\n  options.media = media;\n\n  this.reqres.request(options,\n    function(err, response) {\n      if(err) return cb(err);\n      if(response.type === 'LOAD_FAILED') {\n        return cb(new Error('Load failed'));\n      }\n      cb(null, response.status[0]);\n    }\n  );\n};\n\nApi.prototype.getCurrentSession = function(cb) {\n  if (this.currentSession) return cb(null, this.currentSession);\n  this.getStatus(function(err, status) {\n    if (err) return cb(err);\n    cb(null, status);\n  });\n};\n\nApi.prototype.sessionRequest = function(data, cb) {\n  var that = this;\n  cb = cb || noop;\n  this.getCurrentSession(function(err, session) {\n    if (err) return cb(err);\n    if (!session) return cb(new Error('session not found'));\n    var sessionId = session.mediaSessionId;\n    that.reqres.request(extend(data, { mediaSessionId: sessionId } ),\n      function(err, response) {\n        if(err) return cb(err);\n        cb(null, response.status[0]);\n      }\n    );\n  });\n};\n\n// create a back-reference to the platform\n// needed for some api methods.\nApi.prototype.setPlatform = function(platform) {\n  this.platform = platform;\n};\n\nApi.prototype.play = function(cb) {\n  this.sessionRequest({ type: 'PLAY' }, cb);\n};\n\nApi.prototype.pause = function(cb) {\n  this.sessionRequest({ type: 'PAUSE' }, cb);\n};\n\nApi.prototype.stop = function(cb) {\n  this.sessionRequest({ type: 'STOP' }, cb);\n};\n\nApi.prototype.seek = function(currentTime, cb) {\n  this.sessionRequest({\n    type: 'SEEK',\n    currentTime: currentTime\n  }, cb);\n};\n\n// volume can be a number between 0 and 1\nApi.prototype.setVolume = function(volume, cb) {\n  this.platform.setVolume({ level: volume }, cb || noop);\n};\n\nApi.prototype.getVolume = function(cb) {\n  this.platform.getVolume(cb || noop);\n};\n\nApi.prototype.mute = function(cb) {\n  this.platform.setVolume({ muted: true }, cb || noop);\n};\n\nApi.prototype.unmute = function(cb) {\n  this.platform.setVolume({ muted: false }, cb || noop);\n};\n\nApi.prototype.getPosition = function() {\n  return this.tlHelper.getPosition();\n};\n\nApi.prototype.getProgress = function() {\n  return this.tlHelper.getProgress();\n};\n\nmodule.exports = Api;\n","/home/travis/build/npmtest/node-npmtest-chromecast-player/node_modules/chromecast-player/timelineHelper.js":"var timeline = require('time-line');\nvar inherits = require('util').inherits;\nvar debug = require('debug')('chromecast-player:timelineHelper');\nvar EventEmitter = require('events').EventEmitter;\n\nvar TimelineHelper = function(p) {\n  if (!(this instanceof TimelineHelper)) return new TimelineHelper(p);\n  this.p = p;\n  this.len = 0;\n  this.timelineSupported = false;\n  this.tl = timeline(this.len, 250);\n\n  var onStatus = this._updatePosition.bind(this);\n\n  var onPosition = function(pos) {\n    if (isNaN(pos.percent)) return;\n    this.emit('position', pos);\n  }.bind(this);\n\n  var onPlaying = this.update.bind(this);\n\n  var onClosed = function() {\n    debug('timelineHelper closed');\n    this.p.removeListener('status', onStatus);\n    this.tl.removeListener('position', onPosition);\n    this.p.removeListener('playing', onPlaying);\n    this.p.removeListener('closed', onClosed);\n    this.tl._clear();\n  }.bind(this);\n\n  this.p.on('status', onStatus);\n  this.tl.on('position', onPosition);\n  this.p.on('playing', onPlaying);\n  this.p.on('closed', onClosed);\n};\n\ninherits(TimelineHelper, EventEmitter);\n\nTimelineHelper.prototype._updatePosition = function(status) {\n  this.tl.jumpTo(status.currentTime * 1000);\n  if (status.playerState.toLowerCase() !== 'playing') {\n    this.tl.pause();\n  }\n};\n\nTimelineHelper.prototype._updateLength = function(err, status) {\n  if (err || !status || !status.media || !status.media.duration) {\n    this.timelineSupported = false;\n    return;\n  };\n\n  if (this.len !== status.media.duration) {\n    this.len = status.media.duration;\n    this.tl.reset(this.len * 1000);\n  }\n\n  this.timelineSupported = true;\n  this._updatePosition(status);\n};\n\n\nTimelineHelper.prototype.getPosition = function() {\n  if (!this.timelineSupported) return false;\n  return this.tl.getPosition();\n};\n\nTimelineHelper.prototype.getProgress = function() {\n  if (!this.timelineSupported) return false;\n  return this.tl.getProgress();\n};\n\nTimelineHelper.prototype.update = function() {\n  this.p.getStatus(this._updateLength.bind(this));\n};\n\nmodule.exports = TimelineHelper;\n"}